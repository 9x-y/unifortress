Ниже приведено итоговое **Техническое задание (ТЗ)** для проекта **UniFortress**, в котором объединены все важные аспекты: цели проекта, функциональные требования, архитектура, кроссплатформенность и сценарии взаимодействия пользователя с программой.

---

# Техническое задание на проект UniFortress

## 1. Общее описание

**Название проекта:** UniFortress  
**Цель:** Разработка кроссплатформенного ПО для шифрования съёмных USB-накопителей (флешек) по аналогии с BitLocker, при этом **без необходимости установки** дополнительного софта на конечных устройствах.

**Основные задачи:**
1. Предоставить пользователю удобный способ зашифровать флешку.  
2. При подключении к Windows, macOS, iOS или Android – запросить пароль и открыть доступ к зашифрованным файлам.  
3. Избежать установки «дополнительных программ» или драйверов на компьютеры и мобильные устройства (в идеале всё должно работать «из коробки» с минимальными действиями).

**Язык/технологии:** Rust (по возможности использовать существующие криптобиблиотеки, при необходимости — обвязка C++ для системных вызовов).

---

## 2. Требования к функционалу

### 2.1. Шифрование флешки (первая инициация)

1. **Выбор/Ввод пароля**  
   - Пользователь задаёт пароль, который отвечает за дальнейшее расшифрование.  
   - Проверка сложности пароля (минимальная длина, набор символов, пользовательская политика).

2. **Алгоритм шифрования**  
   - Современный стандарт (напр. AES-256 XTS) или аналогично надёжный режим.  
   - Возможность сменить/обновить алгоритм в будущем (обратная совместимость при обновлениях).

3. **Генерация и хранение ключей**  
   - Ключ хранится на самом носителе в зашифрованном виде, расшифровка — через пароль.  
   - Использовать KDF (например, PBKDF2, Argon2) для снижения риска брутфорса.

4. **Системная область**  
   - На флешке создаётся область (или набор файлов), содержащая:  
     - Метаинформацию (заголовок, версия формата, соль, HMAC).  
     - Portable-приложение для каждой платформы (Windows, macOS).  
     - При необходимости — отдельные файлы для Android/iOS (или инструкция по установке приложения).

5. **Смена пароля**  
   - Функция смены пароля без полной перезашифровки, при условии ввода текущего пароля.

---

### 2.2. Доступ к зашифрованным данным

1. **Ввод пароля**  
   - При подключении флешки пользователь запускает мини-приложение (portable), вводит пароль, и том монтируется (или иным способом становится доступным) для чтения/записи.

2. **Автоотключение**  
   - При извлечении носителя зашифрованный раздел автоматически «закрывается».  
   - При желании — механизмы «тайм-аута» после долгого бездействия.

3. **Совместимость**  
   - Если флешка зашифрована на Windows, пользователь должен иметь возможность расшифровать и работать с ней на macOS, Android, iOS, и наоборот (единый формат).

---

### 2.3. Кроссплатформенность

1. **Windows (10/11 и выше)**  
   - Наличие небольшого `.exe`, лежащего на флешке (UniFortress.exe).  
   - Возможность ручного запуска через проводник.  
   - (Опционально) Автозапуск, если это не блокируется политикой безопасности Windows.

2. **macOS (актуальные версии)**  
   - На флешке хранится `.app` (portable).  
   - Пользователь запускает приложение: «Encrypt» при первой настройке или ввод пароля для расшифровки.

3. **iOS / iPadOS**  
   - Ограничения системного доступа к USB-накопителям. Реально нужно отдельное приложение (через App Store), которое может предоставлять «Document Provider» или собственный способ открыть зашифрованные файлы.  
   - На самой флешке может лежать ссылка или инструкция по установке приложения.  
   - Сценарий: пользователь вставляет флешку через Lightning/USB-C → открывает «Файлы» → видит иконку приложения или файлы → при запуске запрашивается пароль.

4. **Android**  
   - Флешка через OTG-кабель.  
   - Лежит `.apk` или ссылка на Google Play для загрузки приложения.  
   - После установки и запуска приложения: ввод пароля → доступ к зашифрованным данным (через SAF или внутренний проводник).

**Важно**: Полностью «без установки» на мобильных платформах (iOS/Android) **невозможно** — там по умолчанию нет драйвера для «сложного» расшифрования. Но цель — минимизировать действия: приложение можно распространять бесплатно, и пользователь просто его запускает, как встроенную часть флешки.

---

## 3. Архитектура и компоненты

### 3.1. Ядро (Core)

- **Язык:** Rust (либо Rust + C++ при необходимости).  
- **Ответственность**:  
  - Логика шифрования/расшифрования (через криптобиблиотеки).  
  - Работа с метаданными тома (заголовок, ключ, версия, HMAC).  
  - Генерация ключей, KDF, смена пароля.

### 3.2. Платформенные модули (Platform Adapters)

- **Windows**:  
  - Монтирование виртуального диска, взаимодействие с WinAPI.  
  - При возможности — Shell Extension (опционально).  

- **macOS**:  
  - Работа с блочным устройством, опционально FUSE, если требуется.  
  - Portable `.app` для GUI.

- **iOS**:  
  - Реализация через официальное приложение (или File Provider).  
  - Минимальное взаимодействие внутри sandbox.

- **Android**:  
  - SAF (Storage Access Framework) или прямой доступ к USB (если позволяет устройство).  
  - `.apk` или ссылка на Play Store.

### 3.3. UI / CLI

- **GUI**  
  - Мини-приложение (окно) со сценарием «Зашифровать флешку / Ввести пароль».  
  - Отображение прогресса шифрования, проверка сильности пароля.  

- **CLI (опционально)**  
  - Для продвинутых пользователей или администраторов: скрипты `encrypt.sh`, `run.sh`, `test.sh`.

---

## 4. Процесс шифрования с точки зрения пользователя

### 4.1. Шаги «первого запуска»

1. **Вставить флешку**.  
2. **Запустить** соответствующее portable-приложение (на Windows это UniFortress.exe, на macOS — UniFortress.app, на Android/iOS — установить/открыть приложение).  
3. **Нажать «Encrypt»** (или «Зашифровать»), выбрать носитель (если подключено несколько).  
4. **Задать пароль** (программа проверит сложность).  
5. **Дождаться окончания** шифрования (форматирование, запись заголовка, создание зашифрованного тома).  
6. **Готово**. Теперь флешка зашифрована.

### 4.2. Шаги «повторного использования»

1. **Вставить зашифрованную флешку**.  
2. **Запустить** UniFortress-приложение (или отдельное приложение на мобильном устройстве).  
3. **Ввести пароль**.  
4. Система монтирует и показывает зашифрованное содержимое.  
5. При **извлечении** флешки — данные «закрываются».

*(На мобильных системах пользователь доступается к файлам через само приложение UniFortress или через соответствующий системный механизм (Document Provider/SAF).)*

---

## 5. Безопасность

1. **Криптографические стандарты**  
   - AES-256 (режим XTS или другой надёжный режим).  
   - KDF: PBKDF2, Argon2.  
   - Защита от brute-force (увеличение времени при неверных попытках и т.п.).

2. **Контроль целостности**  
   - Использовать HMAC или другие механизмы для защиты от подделки заголовка.  
   - Проверять при каждом монтировании.

3. **Метод защиты от анализа**  
   - Минимизировать метаданные в открытом виде.  
   - Поддерживать опцию скрытых разделов (если потребуется).

---

## 6. Тестирование

1. **Юнит-тесты (Rust)**  
   - Шифрование/расшифрование, смена пароля, тест ключей.  
2. **Интеграционные тесты**  
   - Зашифровать на Windows → открыть на macOS; зашифровать на Android → проверить доступ на Windows и т.д.  
3. **Тесты производительности**  
   - Оценка скорости чтения/записи большого объёма.  
4. **Тесты на отказоустойчивость**  
   - Отключение флешки во время шифрования, неверные пароли, повреждение заголовка.

---

## 7. Система сборки и структура проекта

- **Rust (Cargo)**:  
  - `src/` — ядро (encryption, decryption, platform/).  
  - `tests/` — интеграционные тесты.  
  - `scripts/` — скрипты (build.sh, run.sh, test.sh, doc.sh).  
  - `docs/` — документация по архитектуре, API, использованию.  

- **Сборка под Android/iOS**:  
  - `cargo-ndk` (Android), Rust для iOS (через Cargo + Xcode).  
  - GUI/Launcher-приложение (на Kotlin/Swift или кроссплатформенное) вызывает Rust-библиотеку.

---

## 8. Документация и сроки

1. **Документация**  
   - Для разработчиков: описание API, схемы хранения данных, детальный гайд по сборке под все платформы.  
   - Для пользователей: краткие инструкции — «Как зашифровать?», «Как открыть?».

2. **План и сроки (примерно)**  
   1. **Прототип ядра (Rust)**: 1-2 месяца.  
   2. **Интеграция Windows/macOS**: 1-2 месяца.  
   3. **Интеграция Android/iOS**: 2-3 месяца (учитывая ограничения, тестирование).  
   4. **Тестирование, отладка**: 1-2 месяца.  
   5. **Документация и финальный релиз**: ещё 1 месяц.

---

## 9. Дополнительные условия

1. **Лицензирование**  
   - Определить модель: проприетарная, open-source или гибрид.  
2. **Локализация**  
   - При необходимости — поддержка нескольких языков интерфейса.  
3. **Монетизация (опционально)**  
   - Возможные платные версии с дополнительными функциями или расширенной поддержкой.

---

### Итог

**UniFortress** — это кроссплатформенное решение для шифрования USB-накопителей в стиле BitLocker. Данное ТЗ описывает архитектуру, функциональность, пользовательский сценарий, требования к безопасности и тестированию. В дальнейшем можно дополнительно детализировать каждый пункт (драйверы, API, UX на мобильных устройствах) и уточнять детали по мере разработки.


______________


               ┌─────────────────────────────┐
               │         Пользователь        │
               │  • Вводит пароль            │
               │  • Выбирает «Encrypt»       │
               │    или «Разблокировать»     │
               └───────────────┬─────────────┘
                               │
                               ▼
               ┌─────────────────────────────┐
               │   UniFortress (GUI/CLI)     │
               │   ────────────────────────  │
               │   • Windows (.exe)          │
               │   • macOS (.app)            │
               │   • iOS (App Store)         │
               │   • Android (.apk)          │
               └───────────────┬─────────────┘
                               │ Вызовы
                               ▼
               ┌─────────────────────────────┐
               │        Ядро (Core)         │
               │        (Rust-библиотека)   │
               │   ────────────────────────  │
               │   • encryption.rs          │
               │   • decryption.rs          │
               │   • kdf/key_mgmt.rs        │
               │   • Использует:            │
               │     ring / libsodium /     │
               │     OpenSSL (через FFI)    │
               └───────────────┬─────────────┘
                               │
                               ▼
               ┌─────────────────────────────┐
               │  Платформенные адаптеры     │
               │        (platform/)          │
               │   ────────────────────────  │
               │   • windows.rs (WinAPI)     │
               │   • macos.rs   (FUSE/API)   │
               │   • ios.rs     (Document    │
               │       Provider, sandbox)    │
               │   • android.rs (SAF/NDK)    │
               └───────────────┬─────────────┘
                               │
                               ▼
               ┌─────────────────────────────┐
               │     USB-флешка (носитель)   │
               │   ────────────────────────  │
               │   • Зашифрованный том       │
               │   • Метаданные (заголовок,  │
               │     ключ, версия, HMAC)     │
               │   • Portable-приложение     │
               │     (exe/app/apk и т.д.)    │
               └─────────────────────────────┘
___________________________

Структура проекта.


UniFortress/
├── Cargo.toml
├── Cargo.lock
├── README.md
├── LICENSE
├── .gitignore
│
├── Docs/
│   ├── Architecture.md
│   ├── UseCases.md
│   └── DesignDecisions.md
│
├── Scripts/
│   ├── Build.sh
│   ├── Run.sh
│   ├── Test.sh
│   └── Doc.sh
│
├── Src/
│   ├── Main.rs
│   ├── Encrypt.rs
│   ├── Decrypt.rs
│   ├── Platform/
│   │   ├── Windows.rs
│   │   ├── MacOS.rs
│   │   ├── IOS.rs
│   │   ├── Android.rs
│   │   └── Common.rs
│   └── Utils.rs
│
├── Tests/
│   ├── IntegrationTest.rs
│   └── OtherTests.rs
│
└── .github/
    └── Workflows/
        └── Rust.yml
